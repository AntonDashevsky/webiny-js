# This file was automatically generated by github-actions-wac.
# DO NOT MODIFY IT BY HAND. Instead, modify the source *.wac.ts file(s)
# and run "github-actions-wac build" (or "ghawac build") to regenerate this file.
# For more information, run "github-actions-wac --help".
name: Next Branch - Push
'on':
  push:
    branches:
      - next
jobs:
  constants:
    name: Create constants
    outputs:
      global-cache-key: ${{ steps.global-cache-key.outputs.global-cache-key }}
      run-cache-key: ${{ steps.run-cache-key.outputs.run-cache-key }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
      - name: Create global cache key
        id: global-cache-key
        run: >-
          echo "global-cache-key=next-${{ runner.os }}-$(/bin/date -u
          "+%m%d")-${{ vars.RANDOM_CACHE_KEY_SUFFIX }}" >> $GITHUB_OUTPUT
      - name: Create workflow run cache key
        id: run-cache-key
        run: >-
          echo "run-cache-key=${{ github.run_id }}-${{ github.run_attempt }}-${{
          vars.RANDOM_CACHE_KEY_SUFFIX }}" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  build:
    name: Build
    needs: constants
    runs-on: webiny-build-packages
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.global-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  codeAnalysis:
    name: Static code analysis
    needs:
      - constants
      - build
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Check code formatting
        run: yarn prettier:check
        working-directory: next
      - name: Check dependencies
        run: yarn adio
        working-directory: next
      - name: Check TS configs
        run: yarn check-ts-configs
        working-directory: next
      - name: ESLint
        run: yarn eslint
        working-directory: next
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  staticCodeAnalysisVerifyDependencies:
    needs:
      - constants
      - build
    name: Static code analysis (verify dependencies)
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Sync Dependencies Verification
        run: yarn verify-dependencies
        working-directory: next
      - name: Check Package Node Modules
        run: yarn check-package-dependencies
        working-directory: next
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  staticCodeAnalysisTs:
    name: Static code analysis (TypeScript)
    runs-on: webiny-build-packages
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Check types for Cypress tests
        run: yarn cy:ts
        working-directory: next
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  jestTestsNoStorage:
    needs:
      - constants
      - build
    name: ${{ matrix.package.cmd }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - 22
        package: >-
          ${{
          fromJson('[{"cmd":"packages/api","packageName":"api","id":"806497aaa729e8d39f59792bcfb12b26"},{"cmd":"packages/api-admin-settings","packageName":"api-admin-settings","id":"31140e7ea9283c9db32ec5f905ce2a1e"},{"cmd":"packages/api-authentication","packageName":"api-authentication","id":"0eaf9f853f122e4ab215bf49d39f3edc"},{"cmd":"packages/api-authentication-cognito","packageName":"api-authentication-cognito","id":"dfb5e1fcea213538a9730314cb5e7d06"},{"cmd":"packages/api-headless-cms-ddb","packageName":"api-headless-cms-ddb","id":"5333e1fe6c2b8f5bbcb101a446419c3e"},{"cmd":"packages/api-headless-cms-scheduler","packageName":"api-headless-cms-scheduler","id":"67c8a941b9f00309ab9e4d158d3c54a9"},{"cmd":"packages/api-headless-cms-tasks","packageName":"api-headless-cms-tasks","id":"96289ad460c721cf2801c08e8b58c3d3"},{"cmd":"packages/api-record-locking","packageName":"api-record-locking","id":"9340c019a5369ea1aa55f7ed28b09f48"},{"cmd":"packages/api-sync-system","packageName":"api-sync-system","id":"a79a4c6bc887265912d56ea0a40088e7"},{"cmd":"packages/api-wcp","packageName":"api-wcp","id":"77ff8a0a075e8d9f7e25001ea64c6c9e"},{"cmd":"packages/api-websockets","packageName":"api-websockets","id":"fd704b97c31f78a886b342babd344d33"},{"cmd":"packages/app-aco","packageName":"app-aco","id":"dddb66beffe2e54804d5bdedd2b423cb"},{"cmd":"packages/app-admin","packageName":"app-admin","id":"53bbef747a26e831904585bcfdd845f7"},{"cmd":"packages/data-migration","packageName":"data-migration","id":"294257fffed0174f169b2c812e16258e"},{"cmd":"packages/db-dynamodb","packageName":"db-dynamodb","id":"5cb733de265d7bbda981fce60f2a8962"},{"cmd":"packages/di-container","packageName":"di-container","id":"70e0a6393c0bf39362cfbc54c5bd72f6"},{"cmd":"packages/form","packageName":"form","id":"5707e699d8a4d3b8ee1954c070a50617"},{"cmd":"packages/handler","packageName":"handler","id":"1dad17bbf61657b4308250e8293cb5dd"},{"cmd":"packages/handler-aws","packageName":"handler-aws","id":"2a5bd44c5f2a4290c43f9021bbc705a5"},{"cmd":"packages/handler-graphql","packageName":"handler-graphql","id":"74884166fb2bf383da482fb78b18b704"},{"cmd":"packages/ioc","packageName":"ioc","id":"af22b6d7d245321d64d4b714d03ef3e1"},{"cmd":"packages/lexical-converter","packageName":"lexical-converter","id":"52e3bb3ea633bd27d5bab8be976cd16f"},{"cmd":"packages/plugins","packageName":"plugins","id":"c91537eaa40845d816d0d9f39e66018b"},{"cmd":"packages/pubsub","packageName":"pubsub","id":"fc14c28c51c537a7d9edd33d73ae29e2"},{"cmd":"packages/react-composition","packageName":"react-composition","id":"428b8a3187fe275cb76da6bad0ba3918"},{"cmd":"packages/react-properties","packageName":"react-properties","id":"7578e63dcaa1ac66fed4a8dd936a9285"},{"cmd":"packages/react-rich-text-lexical-renderer","packageName":"react-rich-text-lexical-renderer","id":"452451b34eb7e0134e99b0706e5eb076"},{"cmd":"packages/utils","packageName":"utils","id":"696ceb17e38e4a274d4a149d24513b78"},{"cmd":"packages/validation","packageName":"validation","id":"9c68da33792a1214ae45e040a2830cd7"}]')
          }}
    runs-on: ${{ matrix.os }}
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      AWS_REGION: eu-central-1
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Run tests
        run: yarn test ${{ matrix.package.cmd }}
        working-directory: next
  jestTestsDdb:
    needs:
      - constants
      - build
    name: ${{ matrix.package.cmd }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - 22
        package: >-
          ${{ fromJson('[{"cmd":"packages/api-aco --
          --storage=ddb","storage":"ddb","packageName":"api-aco","id":"15acbd212927499d42e3576530647d25"},{"cmd":"packages/api-audit-logs
          --
          --storage=ddb","storage":"ddb","packageName":"api-audit-logs","id":"4ba29016a131579d08fb3b6a3d65b27e"},{"cmd":"packages/api-file-manager
          --
          --storage=ddb","storage":"ddb","packageName":"api-file-manager","id":"bbf6b73eb55caef9355321f3619881da"},{"cmd":"packages/api-file-manager-aco
          --
          --storage=ddb","storage":"ddb","packageName":"api-file-manager-aco","id":"2ba56b54568ab8b420b217c2641a9e3b"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb
          --shard=1/6","storage":"ddb","packageName":"api-headless-cms","id":"b51da4451d67feba87815c45c8a77f07"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb
          --shard=2/6","storage":"ddb","packageName":"api-headless-cms","id":"7b80a3da2817c7364ad3946bb6431e33"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb
          --shard=3/6","storage":"ddb","packageName":"api-headless-cms","id":"4cc3707f924141a9ebdf6a01b061dbbb"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb
          --shard=4/6","storage":"ddb","packageName":"api-headless-cms","id":"fba5ea3ffe14c76c508ea377f08dce29"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb
          --shard=5/6","storage":"ddb","packageName":"api-headless-cms","id":"3f9c06342fa86881c8baade96a6309e0"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb
          --shard=6/6","storage":"ddb","packageName":"api-headless-cms","id":"cb6f53e134791a5d486eac02fc9658c8"},{"cmd":"packages/api-headless-cms-aco
          --
          --storage=ddb","storage":"ddb","packageName":"api-headless-cms-aco","id":"0768bd795eaac4f59d7d6f478e33b06d"},{"cmd":"packages/api-headless-cms-bulk-actions
          --
          --storage=ddb","storage":"ddb","packageName":"api-headless-cms-bulk-actions","id":"71d318bd9d71d6f277c8a61313aacc6b"},{"cmd":"packages/api-headless-cms-import-export
          --
          --storage=ddb","storage":"ddb","packageName":"api-headless-cms-import-export","id":"08bdac6562518d9962dec595862a756b"},{"cmd":"packages/api-i18n
          --
          --storage=ddb","storage":"ddb","packageName":"api-i18n","id":"972061169b3dcc8bef4ba9862dd0c9c6"},{"cmd":"packages/api-log
          --
          --storage=ddb","storage":"ddb","packageName":"api-log","id":"2216ac84ec24535d6a4a30ce43dc3c9b"},{"cmd":"packages/api-mailer
          --
          --storage=ddb","storage":"ddb","packageName":"api-mailer","id":"133a7e627680acd2cddf04d2c1a7764f"},{"cmd":"packages/api-security
          --
          --storage=ddb","storage":"ddb","packageName":"api-security","id":"f25e2f92fec90ec06f962d8600f714a2"},{"cmd":"packages/api-security-cognito
          --
          --storage=ddb","storage":"ddb","packageName":"api-security-cognito","id":"f8a12c47111e0d53885d3ba9cff206f4"},{"cmd":"packages/api-tenancy
          --
          --storage=ddb","storage":"ddb","packageName":"api-tenancy","id":"70ea37c792cd64bac2b4b1bcfe7735b6"},{"cmd":"packages/api-tenant-manager
          --
          --storage=ddb","storage":"ddb","packageName":"api-tenant-manager","id":"7e0921c9b13d21197004eba7f31a69e3"},{"cmd":"packages/tasks
          --
          --storage=ddb","storage":"ddb","packageName":"tasks","id":"9b42b8eb53b8a5047f49f2cf60c254b1"}]')
          }}
    runs-on: ${{ matrix.os }}
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      AWS_REGION: eu-central-1
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Run tests
        run: yarn test ${{ matrix.package.cmd }}
        working-directory: next
  jestTestsDdbEs:
    needs:
      - constants
      - build
    name: ${{ matrix.package.cmd }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - 22
        package: >-
          ${{ fromJson('[{"cmd":"packages/api-aco --
          --storage=ddb-es,ddb","storage":"ddb-es","packageName":"api-aco","id":"53fa4e6eb3dab4f159f64e03087acb6b"},{"cmd":"packages/api-audit-logs
          --
          --storage=ddb-es,ddb","storage":"ddb-es","packageName":"api-audit-logs","id":"ed346ed6e35906d1fd501a4f85064f5d"},{"cmd":"packages/api-dynamodb-to-elasticsearch
          --
          --storage=ddb-es,ddb","storage":["ddb-es"],"packageName":"api-dynamodb-to-elasticsearch","id":"11b13185c9f3722c9fa9bbe8984e286e"},{"cmd":"packages/api-elasticsearch
          --
          --storage=ddb-es,ddb","storage":["ddb-es"],"packageName":"api-elasticsearch","id":"e029ed84c79961b5e5e7a165f58e00b8"},{"cmd":"packages/api-elasticsearch-tasks
          --
          --storage=ddb-es,ddb","storage":"ddb-es","packageName":"api-elasticsearch-tasks","id":"226edfac4a8d450ab9419c4cffec647c"},{"cmd":"packages/api-file-manager
          --
          --storage=ddb-es,ddb","storage":"ddb-es","packageName":"api-file-manager","id":"750df55ba0192af3ca3f4f0c4a54ec32"},{"cmd":"packages/api-file-manager-aco
          --
          --storage=ddb-es,ddb","storage":"ddb-es","packageName":"api-file-manager-aco","id":"b86971bcba34cde9f206489f8d72d89b"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-es,ddb
          --shard=1/6","storage":"ddb-es","packageName":"api-headless-cms","id":"2acbb1056120e64841e5dcb63990535d"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-es,ddb
          --shard=2/6","storage":"ddb-es","packageName":"api-headless-cms","id":"61e38837cd3bb9cd36dddb3fc3097672"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-es,ddb
          --shard=3/6","storage":"ddb-es","packageName":"api-headless-cms","id":"30a640c0349217cf9a541f7d040cb380"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-es,ddb
          --shard=4/6","storage":"ddb-es","packageName":"api-headless-cms","id":"b97f1b5d0292c1c2cd0dbbe88ddceabb"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-es,ddb
          --shard=5/6","storage":"ddb-es","packageName":"api-headless-cms","id":"97184c5de7c2b68a0c7ba1aa1b2dfb34"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-es,ddb
          --shard=6/6","storage":"ddb-es","packageName":"api-headless-cms","id":"b216bb102dc1d8dadb411b9ba4d1e912"},{"cmd":"packages/api-headless-cms-aco
          --
          --storage=ddb-es,ddb","storage":"ddb-es","packageName":"api-headless-cms-aco","id":"9ad511ab0f4f3d7aabaf1db876523dfa"},{"cmd":"packages/api-headless-cms-bulk-actions
          --
          --storage=ddb-es,ddb","storage":"ddb-es","packageName":"api-headless-cms-bulk-actions","id":"ecfc9a6faf806997f7084869078a33ed"},{"cmd":"packages/api-headless-cms-ddb-es
          --
          --storage=ddb-es,ddb","storage":"ddb-es","packageName":"api-headless-cms-ddb-es","id":"81212708ed737d51e6a1030488c5777a"},{"cmd":"packages/api-headless-cms-es-tasks
          --
          --storage=ddb-es,ddb","storage":["ddb-es"],"packageName":"api-headless-cms-es-tasks","id":"a8ac0d0976c543792fc9c3da3c9d1229"},{"cmd":"packages/api-headless-cms-import-export
          --
          --storage=ddb-es,ddb","storage":"ddb-es","packageName":"api-headless-cms-import-export","id":"0fc711b37683ed01e6f68cd48b1909e9"},{"cmd":"packages/api-mailer
          --
          --storage=ddb-es,ddb","storage":"ddb-es","packageName":"api-mailer","id":"e48dc65a85483c6b0becf94e498361d9"},{"cmd":"packages/migrations
          --
          --storage=ddb-es,ddb","storage":["ddb-es"],"packageName":"migrations","id":"a7a76e11a8105561280512dd36df80bb"},{"cmd":"packages/tasks
          --
          --storage=ddb-es,ddb","storage":"ddb-es","packageName":"tasks","id":"b455565ee70d5cae3766ed1931475c3a"}]')
          }}
    runs-on: ${{ matrix.os }}
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      AWS_REGION: eu-central-1
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_ELASTIC_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.ELASTIC_SEARCH_ENDPOINT }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ matrix.package.id }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726952677045:role/GitHubActionsWebinyJs
          aws-region: eu-central-1
      - uses: actions/checkout@v4
        with:
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Run tests
        run: yarn test ${{ matrix.package.cmd }}
        working-directory: next
    permissions:
      id-token: write
  jestTestsDdbOs:
    needs:
      - constants
      - build
    name: ${{ matrix.package.cmd }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - 22
        package: >-
          ${{ fromJson('[{"cmd":"packages/api-aco --
          --storage=ddb-os,ddb","storage":"ddb-os","packageName":"api-aco","id":"f5d285c11b53429d4e6fc77b0d42d46a"},{"cmd":"packages/api-audit-logs
          --
          --storage=ddb-os,ddb","storage":"ddb-os","packageName":"api-audit-logs","id":"be20347ee834032743b3cf9441813084"},{"cmd":"packages/api-dynamodb-to-elasticsearch
          --
          --storage=ddb-os,ddb","storage":["ddb-os"],"packageName":"api-dynamodb-to-elasticsearch","id":"b388d48d3ade3ab8f95ce15d7137b5cc"},{"cmd":"packages/api-elasticsearch
          --
          --storage=ddb-os,ddb","storage":["ddb-os"],"packageName":"api-elasticsearch","id":"2be6c8b611bbd27ddfe9347d1ac536a0"},{"cmd":"packages/api-elasticsearch-tasks
          --
          --storage=ddb-os,ddb","storage":"ddb-os","packageName":"api-elasticsearch-tasks","id":"9027390d29d297c74cb07fa99961a24f"},{"cmd":"packages/api-file-manager
          --
          --storage=ddb-os,ddb","storage":"ddb-os","packageName":"api-file-manager","id":"a026a4bb9a6b4ad0ed84e2d455faad68"},{"cmd":"packages/api-file-manager-aco
          --
          --storage=ddb-os,ddb","storage":"ddb-os","packageName":"api-file-manager-aco","id":"048590a8f0afe7312292283793c5d17a"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-os,ddb
          --shard=1/6","storage":"ddb-os","packageName":"api-headless-cms","id":"6627333313d66ffd313b1f7881938199"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-os,ddb
          --shard=2/6","storage":"ddb-os","packageName":"api-headless-cms","id":"384885f6c5370d7b0b23bf9510d4db40"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-os,ddb
          --shard=3/6","storage":"ddb-os","packageName":"api-headless-cms","id":"39697c67ee7a3ef42c20597da811359d"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-os,ddb
          --shard=4/6","storage":"ddb-os","packageName":"api-headless-cms","id":"86d368902efa65c0e34ae7c7565a3bee"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-os,ddb
          --shard=5/6","storage":"ddb-os","packageName":"api-headless-cms","id":"03c38f8fa3d6e20ecf70ea9655f5a6c9"},{"cmd":"packages/api-headless-cms
          -- --storage=ddb-os,ddb
          --shard=6/6","storage":"ddb-os","packageName":"api-headless-cms","id":"e8f06621063827bfd306862ad2115807"},{"cmd":"packages/api-headless-cms-aco
          --
          --storage=ddb-os,ddb","storage":"ddb-os","packageName":"api-headless-cms-aco","id":"1cbff8e9cc5ed1d69c81b3b21eaed141"},{"cmd":"packages/api-headless-cms-bulk-actions
          --
          --storage=ddb-os,ddb","storage":"ddb-os","packageName":"api-headless-cms-bulk-actions","id":"346534319ee9cc5fb887251059dc07e2"},{"cmd":"packages/api-headless-cms-ddb-es
          --
          --storage=ddb-os,ddb","storage":"ddb-os","packageName":"api-headless-cms-ddb-es","id":"20771930de039aaae3169a9ba41f9772"},{"cmd":"packages/api-headless-cms-es-tasks
          --
          --storage=ddb-os,ddb","storage":["ddb-os"],"packageName":"api-headless-cms-es-tasks","id":"2d9c313b3e9c3905b00a54b932acba22"},{"cmd":"packages/api-headless-cms-import-export
          --
          --storage=ddb-os,ddb","storage":"ddb-os","packageName":"api-headless-cms-import-export","id":"25050f9d3afa03574c9de02bdd1a8131"},{"cmd":"packages/api-mailer
          --
          --storage=ddb-os,ddb","storage":"ddb-os","packageName":"api-mailer","id":"6008a9f67393eb80384140117d9fc754"},{"cmd":"packages/migrations
          --
          --storage=ddb-os,ddb","storage":["ddb-os"],"packageName":"migrations","id":"060e3da0e5d744dc684f0938dad2aff0"},{"cmd":"packages/tasks
          --
          --storage=ddb-os,ddb","storage":"ddb-os","packageName":"tasks","id":"11c1f969312541887f6480e5e8d59198"}]')
          }}
    runs-on: ${{ matrix.os }}
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      AWS_REGION: eu-central-1
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_OPEN_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.OPEN_SEARCH_ENDPOINT }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ matrix.package.id }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726952677045:role/GitHubActionsWebinyJs
          aws-region: eu-central-1
      - uses: actions/checkout@v4
        with:
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Run tests
        run: yarn test ${{ matrix.package.cmd }}
        working-directory: next
    permissions:
      id-token: write
  e2eTestsDdb-constants:
    name: Constants - DDB
    needs:
      - build
    outputs:
      cypress-folders: ${{ steps.list-cypress-folders.outputs.cypress-folders }}
      pulumi-backend-url: ${{ steps.pulumi-backend-url.outputs.pulumi-backend-url }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
      - name: List Cypress tests folders
        id: list-cypress-folders
        run: >-
          echo "cypress-folders=$(node scripts/listCypressTestsFolders.js)" >>
          $GITHUB_OUTPUT
      - name: Get Pulumi backend URL
        id: get-pulumi-backend-url
        run: >-
          echo "pulumi-backend-url=${{ secrets.WEBINY_PULUMI_BACKEND }}${{
          github.run_id }}_ddb" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  e2eTestsDdb-setup:
    needs:
      - constants
      - build
      - e2eTestsDdb-constants
    name: E2E (DDB) - Project setup
    outputs:
      cypress-config: ${{ steps.save-cypress-config.outputs.cypress-config }}
    environment: next
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: 'false'
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      WEBINY_PULUMI_BACKEND: ${{ needs.e2eTestsDdb-constants.outputs.pulumi-backend-url }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726952677045:role/GitHubActionsWebinyJs
          aws-region: eu-central-1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Start Verdaccio local server
        working-directory: next
        run: >-
          yarn add pm2 verdaccio && npx pm2 start verdaccio -- -c
          .verdaccio.yaml
      - name: Configure NPM to use local registry
        run: npm config set registry http://localhost:4873
      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"
      - name: Set git username
        run: git config --global user.name "webiny-bot"
      - name: Create ".npmrc" file in the project root, with a dummy auth token
        run: echo '//localhost:4873/:_authToken="dummy-auth-token"' > .npmrc
        working-directory: next
      - name: Version and publish to Verdaccio
        run: yarn release --type=verdaccio
        working-directory: next
      - name: Create verdaccio-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: verdaccio-files-ddb
          retention-days: 1
          include-hidden-files: true
          path: |-
            next/.verdaccio/
            next/.verdaccio.yaml
      - name: Disable Webiny telemetry
        run: >
          mkdir ~/.webiny && echo '{ "id": "ci", "telemetry": false }' >
          ~/.webiny/config
      - name: Create a new Webiny project
        run: >
          npx create-webiny-project@local-npm new-webiny-project --tag local-npm
          --no-interactive --assign-to-yarnrc
          '{"npmRegistryServer":"http://localhost:4873","unsafeHttpWhitelist":["localhost"]}'
          --template-options
          '{"region":"eu-central-1","storageOperations":"ddb"}'
      - name: Print CLI version
        working-directory: new-webiny-project
        run: yarn webiny --version
      - name: Create project-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-files-ddb
          retention-days: 1
          include-hidden-files: true
          path: |-
            new-webiny-project/
            !new-webiny-project/node_modules/**/*
            !new-webiny-project/**/node_modules/**/*
            !new-webiny-project/.yarn/cache/**/*
      - name: Deploy Core
        working-directory: new-webiny-project
        run: yarn webiny deploy apps/core --env dev
      - name: Deploy API
        working-directory: new-webiny-project
        run: yarn webiny deploy apps/api --env dev
      - name: Deploy Admin Area
        working-directory: new-webiny-project
        run: yarn webiny deploy apps/admin --env dev
      - name: Deployment Summary
        run: >-
          node
          .github/workflows/wac/utils/runNodeScripts/printDeploymentSummary.js
          '../new-webiny-project' >> $GITHUB_STEP_SUMMARY
        working-directory: next
      - name: Create Cypress config
        run: yarn setup-cypress --projectFolder ../new-webiny-project
        working-directory: next
      - name: Save Cypress config
        id: save-cypress-config
        run: >-
          echo "cypress-config=$(cat cypress-tests/cypress.config.ts | tr -d
          '\t\n\r')" >> $GITHUB_OUTPUT
        working-directory: next
      - name: Cypress - run installation wizard test
        run: >-
          yarn cy:run --browser chrome --spec
          "cypress/e2e/adminInstallation/**/*.cy.js"
        working-directory: next
    runs-on: ubuntu-latest
    permissions:
      id-token: write
  e2eTestsDdb-cypress:
    name: >-
      ${{ matrix.cypress-folder }} (ddb, ${{ matrix.os }}, Node v${{ matrix.node
      }})
    needs:
      - constants
      - e2eTestsDdb-constants
      - e2eTestsDdb-setup
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - 22
        cypress-folder: ${{ fromJson(needs.e2eTestsDdb-constants.outputs.cypress-folders) }}
    environment: next
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: 'false'
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      WEBINY_PULUMI_BACKEND: ${{ needs.e2eTestsDdb-constants.outputs.pulumi-backend-url }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Set up Cypress config
        run: >-
          echo '${{ needs.e2eTestsDdb-setup.outputs.cypress-config }}' >
          cypress-tests/cypress.config.ts
        working-directory: next
      - name: Cypress - run "${{ matrix.cypress-folder }}" tests
        timeout-minutes: 40
        run: yarn cy:run --browser chrome --spec "${{ matrix.cypress-folder }}"
        working-directory: next
    runs-on: ubuntu-latest
  e2eTestsDdb-es-constants:
    name: Constants - DDB-ES
    needs:
      - build
    outputs:
      cypress-folders: ${{ steps.list-cypress-folders.outputs.cypress-folders }}
      pulumi-backend-url: ${{ steps.pulumi-backend-url.outputs.pulumi-backend-url }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
      - name: List Cypress tests folders
        id: list-cypress-folders
        run: >-
          echo "cypress-folders=$(node scripts/listCypressTestsFolders.js)" >>
          $GITHUB_OUTPUT
      - name: Get Pulumi backend URL
        id: get-pulumi-backend-url
        run: >-
          echo "pulumi-backend-url=${{ secrets.WEBINY_PULUMI_BACKEND }}${{
          github.run_id }}_ddb-es" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  e2eTestsDdb-es-setup:
    needs:
      - constants
      - build
      - e2eTestsDdb-es-constants
    name: E2E (DDB-ES) - Project setup
    outputs:
      cypress-config: ${{ steps.save-cypress-config.outputs.cypress-config }}
    environment: next
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: 'false'
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      WEBINY_PULUMI_BACKEND: ${{ needs.e2eTestsDdb-es-constants.outputs.pulumi-backend-url }}
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_ELASTIC_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.ELASTIC_SEARCH_ENDPOINT }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ github.run_id }}_
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726952677045:role/GitHubActionsWebinyJs
          aws-region: eu-central-1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Start Verdaccio local server
        working-directory: next
        run: >-
          yarn add pm2 verdaccio && npx pm2 start verdaccio -- -c
          .verdaccio.yaml
      - name: Configure NPM to use local registry
        run: npm config set registry http://localhost:4873
      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"
      - name: Set git username
        run: git config --global user.name "webiny-bot"
      - name: Create ".npmrc" file in the project root, with a dummy auth token
        run: echo '//localhost:4873/:_authToken="dummy-auth-token"' > .npmrc
        working-directory: next
      - name: Version and publish to Verdaccio
        run: yarn release --type=verdaccio
        working-directory: next
      - name: Create verdaccio-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: verdaccio-files-ddb-es
          retention-days: 1
          include-hidden-files: true
          path: |-
            next/.verdaccio/
            next/.verdaccio.yaml
      - name: Disable Webiny telemetry
        run: >
          mkdir ~/.webiny && echo '{ "id": "ci", "telemetry": false }' >
          ~/.webiny/config
      - name: Create a new Webiny project
        run: >
          npx create-webiny-project@local-npm new-webiny-project --tag local-npm
          --no-interactive --assign-to-yarnrc
          '{"npmRegistryServer":"http://localhost:4873","unsafeHttpWhitelist":["localhost"]}'
          --template-options
          '{"region":"eu-central-1","storageOperations":"ddb-es"}'
      - name: Print CLI version
        working-directory: new-webiny-project
        run: yarn webiny --version
      - name: Create project-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-files-ddb-es
          retention-days: 1
          include-hidden-files: true
          path: |-
            new-webiny-project/
            !new-webiny-project/node_modules/**/*
            !new-webiny-project/**/node_modules/**/*
            !new-webiny-project/.yarn/cache/**/*
      - name: Deploy Core
        working-directory: new-webiny-project
        run: yarn webiny deploy apps/core --env dev
      - name: Deploy API
        working-directory: new-webiny-project
        run: yarn webiny deploy apps/api --env dev
      - name: Deploy Admin Area
        working-directory: new-webiny-project
        run: yarn webiny deploy apps/admin --env dev
      - name: Deployment Summary
        run: >-
          node
          .github/workflows/wac/utils/runNodeScripts/printDeploymentSummary.js
          '../new-webiny-project' >> $GITHUB_STEP_SUMMARY
        working-directory: next
      - name: Create Cypress config
        run: yarn setup-cypress --projectFolder ../new-webiny-project
        working-directory: next
      - name: Save Cypress config
        id: save-cypress-config
        run: >-
          echo "cypress-config=$(cat cypress-tests/cypress.config.ts | tr -d
          '\t\n\r')" >> $GITHUB_OUTPUT
        working-directory: next
      - name: Cypress - run installation wizard test
        run: >-
          yarn cy:run --browser chrome --spec
          "cypress/e2e/adminInstallation/**/*.cy.js"
        working-directory: next
    runs-on: ubuntu-latest
    permissions:
      id-token: write
  e2eTestsDdb-es-cypress:
    name: >-
      ${{ matrix.cypress-folder }} (ddb-es, ${{ matrix.os }}, Node v${{
      matrix.node }})
    needs:
      - constants
      - e2eTestsDdb-es-constants
      - e2eTestsDdb-es-setup
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - 22
        cypress-folder: >-
          ${{ fromJson(needs.e2eTestsDdb-es-constants.outputs.cypress-folders)
          }}
    environment: next
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: 'false'
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      WEBINY_PULUMI_BACKEND: ${{ needs.e2eTestsDdb-es-constants.outputs.pulumi-backend-url }}
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_ELASTIC_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.ELASTIC_SEARCH_ENDPOINT }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ github.run_id }}_
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Set up Cypress config
        run: >-
          echo '${{ needs.e2eTestsDdb-es-setup.outputs.cypress-config }}' >
          cypress-tests/cypress.config.ts
        working-directory: next
      - name: Cypress - run "${{ matrix.cypress-folder }}" tests
        timeout-minutes: 40
        run: yarn cy:run --browser chrome --spec "${{ matrix.cypress-folder }}"
        working-directory: next
    runs-on: ubuntu-latest
  e2eTestsDdb-os-constants:
    name: Constants - DDB-OS
    needs:
      - build
    outputs:
      cypress-folders: ${{ steps.list-cypress-folders.outputs.cypress-folders }}
      pulumi-backend-url: ${{ steps.pulumi-backend-url.outputs.pulumi-backend-url }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
      - name: List Cypress tests folders
        id: list-cypress-folders
        run: >-
          echo "cypress-folders=$(node scripts/listCypressTestsFolders.js)" >>
          $GITHUB_OUTPUT
      - name: Get Pulumi backend URL
        id: get-pulumi-backend-url
        run: >-
          echo "pulumi-backend-url=${{ secrets.WEBINY_PULUMI_BACKEND }}${{
          github.run_id }}_ddb-os" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  e2eTestsDdb-os-setup:
    needs:
      - constants
      - build
      - e2eTestsDdb-os-constants
    name: E2E (DDB-OS) - Project setup
    outputs:
      cypress-config: ${{ steps.save-cypress-config.outputs.cypress-config }}
    environment: next
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: 'false'
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      WEBINY_PULUMI_BACKEND: ${{ needs.e2eTestsDdb-os-constants.outputs.pulumi-backend-url }}
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_OPEN_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.OPEN_SEARCH_ENDPOINT }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ github.run_id }}_
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726952677045:role/GitHubActionsWebinyJs
          aws-region: eu-central-1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Start Verdaccio local server
        working-directory: next
        run: >-
          yarn add pm2 verdaccio && npx pm2 start verdaccio -- -c
          .verdaccio.yaml
      - name: Configure NPM to use local registry
        run: npm config set registry http://localhost:4873
      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"
      - name: Set git username
        run: git config --global user.name "webiny-bot"
      - name: Create ".npmrc" file in the project root, with a dummy auth token
        run: echo '//localhost:4873/:_authToken="dummy-auth-token"' > .npmrc
        working-directory: next
      - name: Version and publish to Verdaccio
        run: yarn release --type=verdaccio
        working-directory: next
      - name: Create verdaccio-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: verdaccio-files-ddb-os
          retention-days: 1
          include-hidden-files: true
          path: |-
            next/.verdaccio/
            next/.verdaccio.yaml
      - name: Disable Webiny telemetry
        run: >
          mkdir ~/.webiny && echo '{ "id": "ci", "telemetry": false }' >
          ~/.webiny/config
      - name: Create a new Webiny project
        run: >
          npx create-webiny-project@local-npm new-webiny-project --tag local-npm
          --no-interactive --assign-to-yarnrc
          '{"npmRegistryServer":"http://localhost:4873","unsafeHttpWhitelist":["localhost"]}'
          --template-options
          '{"region":"eu-central-1","storageOperations":"ddb-os"}'
      - name: Print CLI version
        working-directory: new-webiny-project
        run: yarn webiny --version
      - name: Create project-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-files-ddb-os
          retention-days: 1
          include-hidden-files: true
          path: |-
            new-webiny-project/
            !new-webiny-project/node_modules/**/*
            !new-webiny-project/**/node_modules/**/*
            !new-webiny-project/.yarn/cache/**/*
      - name: Deploy Core
        working-directory: new-webiny-project
        run: yarn webiny deploy apps/core --env dev
      - name: Deploy API
        working-directory: new-webiny-project
        run: yarn webiny deploy apps/api --env dev
      - name: Deploy Admin Area
        working-directory: new-webiny-project
        run: yarn webiny deploy apps/admin --env dev
      - name: Deployment Summary
        run: >-
          node
          .github/workflows/wac/utils/runNodeScripts/printDeploymentSummary.js
          '../new-webiny-project' >> $GITHUB_STEP_SUMMARY
        working-directory: next
      - name: Create Cypress config
        run: yarn setup-cypress --projectFolder ../new-webiny-project
        working-directory: next
      - name: Save Cypress config
        id: save-cypress-config
        run: >-
          echo "cypress-config=$(cat cypress-tests/cypress.config.ts | tr -d
          '\t\n\r')" >> $GITHUB_OUTPUT
        working-directory: next
      - name: Cypress - run installation wizard test
        run: >-
          yarn cy:run --browser chrome --spec
          "cypress/e2e/adminInstallation/**/*.cy.js"
        working-directory: next
    runs-on: ubuntu-latest
    permissions:
      id-token: write
  e2eTestsDdb-os-cypress:
    name: >-
      ${{ matrix.cypress-folder }} (ddb-os, ${{ matrix.os }}, Node v${{
      matrix.node }})
    needs:
      - constants
      - e2eTestsDdb-os-constants
      - e2eTestsDdb-os-setup
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - 22
        cypress-folder: >-
          ${{ fromJson(needs.e2eTestsDdb-os-constants.outputs.cypress-folders)
          }}
    environment: next
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: 'false'
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      WEBINY_PULUMI_BACKEND: ${{ needs.e2eTestsDdb-os-constants.outputs.pulumi-backend-url }}
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_OPEN_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.OPEN_SEARCH_ENDPOINT }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ github.run_id }}_
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: next
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Set up Cypress config
        run: >-
          echo '${{ needs.e2eTestsDdb-os-setup.outputs.cypress-config }}' >
          cypress-tests/cypress.config.ts
        working-directory: next
      - name: Cypress - run "${{ matrix.cypress-folder }}" tests
        timeout-minutes: 40
        run: yarn cy:run --browser chrome --spec "${{ matrix.cypress-folder }}"
        working-directory: next
    runs-on: ubuntu-latest
  npmReleaseUnstable:
    needs:
      - constants
      - codeAnalysis
      - jestTestsNoStorage
      - jestTestsDdb
      - jestTestsDdbEs
      - jestTestsDdbOs
      - e2eTestsDdb-cypress
      - e2eTestsDdb-es-cypress
      - e2eTestsDdb-os-cypress
    name: NPM release ("unstable" tag)
    environment: release
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/cache@v4
        with:
          path: next/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: next/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: next
      - name: Build packages
        run: yarn build
        working-directory: next
      - name: Create ".npmrc" file in the project root
        run: echo "//registry.npmjs.org/:_authToken=\${NPM_TOKEN}" > .npmrc
        working-directory: next
      - name: Set git info
        run: |
          git config --global user.email "webiny-bot@webiny.com"
          git config --global user.name "webiny-bot"
        working-directory: next
      - name: Version and publish to NPM
        run: yarn release --type=unstable
        working-directory: next
    runs-on: ubuntu-latest
