# This file was automatically generated by github-actions-wac.
# DO NOT MODIFY IT BY HAND. Instead, modify the source *.wac.ts file(s)
# and run "github-actions-wac build" (or "ghawac build") to regenerate this file.
# For more information, run "github-actions-wac --help".
name: Dev Branch - Push
'on':
  push:
    branches:
      - dev
jobs:
  constants:
    name: Create constants
    outputs:
      global-cache-key: ${{ steps.global-cache-key.outputs.global-cache-key }}
      run-cache-key: ${{ steps.run-cache-key.outputs.run-cache-key }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
      - name: Create global cache key
        id: global-cache-key
        run: >-
          echo "global-cache-key=dev-${{ runner.os }}-$(/bin/date -u
          "+%m%d")-${{ vars.RANDOM_CACHE_KEY_SUFFIX }}" >> $GITHUB_OUTPUT
      - name: Create workflow run cache key
        id: run-cache-key
        run: >-
          echo "run-cache-key=${{ github.run_id }}-${{ github.run_attempt }}-${{
          vars.RANDOM_CACHE_KEY_SUFFIX }}" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  build:
    name: Build
    needs: constants
    runs-on: webiny-build-packages
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: dev
      - uses: actions/cache@v4
        with:
          path: dev/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: dev/.webiny/cached-packages
          key: ${{ needs.constants.outputs.global-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: dev
      - name: Build packages
        run: yarn build
        working-directory: dev
      - uses: actions/cache@v4
        with:
          path: dev/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  codeAnalysis:
    name: Static code analysis
    needs:
      - constants
      - build
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: dev
      - uses: actions/cache@v4
        with:
          path: dev/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: dev/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: dev
      - name: Check code formatting
        run: yarn prettier:check
        working-directory: dev
      - name: Check dependencies
        run: yarn adio
        working-directory: dev
      - name: Check TS configs
        run: yarn check-ts-configs
        working-directory: dev
      - name: ESLint
        run: yarn eslint
        working-directory: dev
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  staticCodeAnalysisVerifyDependencies:
    needs:
      - constants
      - build
    name: Static code analysis (verify dependencies)
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: dev
      - uses: actions/cache@v4
        with:
          path: dev/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: dev/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: dev
      - name: Build packages
        run: yarn build
        working-directory: dev
      - name: Sync Dependencies Verification
        run: yarn verify-dependencies
        working-directory: dev
      - name: Check Package Node Modules
        run: yarn check-package-dependencies
        working-directory: dev
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  staticCodeAnalysisTs:
    name: Static code analysis (TypeScript)
    runs-on: webiny-build-packages
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: dev
      - uses: actions/cache@v4
        with:
          path: dev/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: dev
      - name: Check types for Cypress tests
        run: yarn cy:ts
        working-directory: dev
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  vitest-constants:
    needs:
      - build
    name: Vitest (No storage) - Constants
    outputs:
      vitest-test-commands: ${{ steps.list-vitest-test-commands.outputs.vitest-test-commands }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: dev
      - id: list-vitest-test-commands
        name: List Vitest Test Commands
        working-directory: dev
        run: >-
          echo "vitest-test-commands=$(node
          .github/workflows/wac/utils/runNodeScripts/listVitestTestCommands.js
          '{"storageOps":null}')" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  vitest-run:
    needs:
      - constants
      - vitest-constants
    name: ${{ matrix.testCommand.title }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - 22
        testCommand: ${{ fromJSON(needs.vitest-constants.outputs.vitest-test-commands) }}
    runs-on: ${{ matrix.os }}
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      AWS_REGION: eu-central-1
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: dev
      - uses: actions/cache@v4
        with:
          path: dev/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: dev/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: dev
      - name: Build packages
        run: yarn build
        working-directory: dev
      - name: Run tests
        run: ${{ matrix.testCommand.cmd }}
        working-directory: dev
  vitest-ddb-constants:
    needs:
      - build
    name: Vitest (DDB) - Constants
    outputs:
      vitest-test-commands: ${{ steps.list-vitest-test-commands.outputs.vitest-test-commands }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: dev
      - id: list-vitest-test-commands
        name: List Vitest Test Commands
        working-directory: dev
        run: >-
          echo "vitest-test-commands=$(node
          .github/workflows/wac/utils/runNodeScripts/listVitestTestCommands.js
          '{"storageOps":"ddb"}')" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  vitest-ddb-run:
    needs:
      - constants
      - vitest-ddb-constants
    name: ${{ matrix.testCommand.title }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - 22
        testCommand: >-
          ${{ fromJSON(needs.vitest-ddb-constants.outputs.vitest-test-commands)
          }}
    runs-on: ${{ matrix.os }}
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      AWS_REGION: eu-central-1
      WEBINY_STORAGE: ddb
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: dev
      - uses: actions/cache@v4
        with:
          path: dev/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: dev/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: dev
      - name: Build packages
        run: yarn build
        working-directory: dev
      - name: Run tests
        run: ${{ matrix.testCommand.cmd }}
        working-directory: dev
  vitest-ddbEs-constants:
    needs:
      - build
    name: Vitest (DDB+ES) - Constants
    outputs:
      vitest-test-commands: ${{ steps.list-vitest-test-commands.outputs.vitest-test-commands }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: dev
      - id: list-vitest-test-commands
        name: List Vitest Test Commands
        working-directory: dev
        run: >-
          echo "vitest-test-commands=$(node
          .github/workflows/wac/utils/runNodeScripts/listVitestTestCommands.js
          '{"storageOps":"ddb-es,ddb"}')" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  vitest-ddbEs-run:
    needs:
      - constants
      - vitest-ddbEs-constants
    name: ${{ matrix.testCommand.title }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - 22
        testCommand: >-
          ${{
          fromJSON(needs.vitest-ddbEs-constants.outputs.vitest-test-commands) }}
    runs-on: ${{ matrix.os }}
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      AWS_REGION: eu-central-1
      WEBINY_STORAGE: ddb-es,ddb
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_ELASTIC_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.ELASTIC_SEARCH_ENDPOINT }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ matrix.testCommand.id }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726952677045:role/GitHubActionsWebinyJs
          aws-region: eu-central-1
      - uses: actions/checkout@v4
        with:
          path: dev
      - uses: actions/cache@v4
        with:
          path: dev/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: dev/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: dev
      - name: Build packages
        run: yarn build
        working-directory: dev
      - name: Run tests
        run: ${{ matrix.testCommand.cmd }}
        working-directory: dev
    permissions:
      id-token: write
  vitest-ddbOs-constants:
    needs:
      - build
    name: Vitest (DDB+OS) - Constants
    outputs:
      vitest-test-commands: ${{ steps.list-vitest-test-commands.outputs.vitest-test-commands }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
        with:
          path: dev
      - id: list-vitest-test-commands
        name: List Vitest Test Commands
        working-directory: dev
        run: >-
          echo "vitest-test-commands=$(node
          .github/workflows/wac/utils/runNodeScripts/listVitestTestCommands.js
          '{"storageOps":"ddb-os,ddb"}')" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  vitest-ddbOs-run:
    needs:
      - constants
      - vitest-ddbOs-constants
    name: ${{ matrix.testCommand.title }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
        node:
          - 22
        testCommand: >-
          ${{
          fromJSON(needs.vitest-ddbOs-constants.outputs.vitest-test-commands) }}
    runs-on: ${{ matrix.os }}
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
      AWS_REGION: eu-central-1
      WEBINY_STORAGE: ddb-os,ddb
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_OPEN_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.OPEN_SEARCH_ENDPOINT }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ matrix.testCommand.id }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726952677045:role/GitHubActionsWebinyJs
          aws-region: eu-central-1
      - uses: actions/checkout@v4
        with:
          path: dev
      - uses: actions/cache@v4
        with:
          path: dev/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: dev/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: dev
      - name: Build packages
        run: yarn build
        working-directory: dev
      - name: Run tests
        run: ${{ matrix.testCommand.cmd }}
        working-directory: dev
    permissions:
      id-token: write
  e2eTests-ddb-constants:
    name: E2E (DDB) - Constants
    needs:
      - build
    outputs:
      cypress-folders: ${{ steps.list-cypress-folders.outputs.cypress-folders }}
      pulumi-backend-url: ${{ steps.pulumi-backend-url.outputs.pulumi-backend-url }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
      - name: List Cypress tests folders
        id: list-cypress-folders
        run: >-
          echo "cypress-folders=$(node scripts/listCypressTestsFolders.js)" >>
          $GITHUB_OUTPUT
      - name: Get Pulumi backend URL
        id: get-pulumi-backend-url
        run: >-
          echo "pulumi-backend-url=${{ secrets.WEBINY_PULUMI_BACKEND }}${{
          github.run_id }}_ddb" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  e2eTests-ddb-setup:
    needs:
      - constants
      - build
      - e2eTests-ddb-constants
    name: E2E (DDB) - Project setup
    outputs:
      cypress-config: ${{ steps.save-cypress-config.outputs.cypress-config }}
    environment: next
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: 'false'
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      WEBINY_PULUMI_BACKEND: ${{ needs.e2eTests-ddb-constants.outputs.pulumi-backend-url }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726952677045:role/GitHubActionsWebinyJs
          aws-region: eu-central-1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: dev
      - uses: actions/cache@v4
        with:
          path: dev/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: dev/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: dev
      - name: Build packages
        run: yarn build
        working-directory: dev
      - name: Start Verdaccio local server
        working-directory: dev
        run: >-
          yarn add pm2 verdaccio && npx pm2 start verdaccio -- -c
          .verdaccio.yaml
      - name: Configure NPM to use local registry
        run: npm config set registry http://localhost:4873
      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"
      - name: Set git username
        run: git config --global user.name "webiny-bot"
      - name: Create ".npmrc" file in the project root, with a dummy auth token
        run: echo '//localhost:4873/:_authToken="dummy-auth-token"' > .npmrc
        working-directory: dev
      - name: Version and publish to Verdaccio
        run: yarn release --type=verdaccio
        working-directory: dev
      - name: Create verdaccio-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: verdaccio-files-ddb
          retention-days: 1
          include-hidden-files: true
          path: |-
            dev/.verdaccio/
            dev/.verdaccio.yaml
      - name: Disable Webiny telemetry
        run: >
          mkdir ~/.webiny && echo '{ "id": "ci", "telemetry": false }' >
          ~/.webiny/config
      - name: Create a new Webiny project
        run: >
          npx create-webiny-project@local-npm new-webiny-project --tag local-npm
          --no-interactive --assign-to-yarnrc
          '{"npmRegistryServer":"http://localhost:4873","unsafeHttpWhitelist":["localhost"]}'
          --template-options
          '{"region":"eu-central-1","storageOperations":"ddb"}'
      - name: Print CLI version
        working-directory: new-webiny-project
        run: yarn webiny --version
      - name: Create project-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-files-ddb
          retention-days: 1
          include-hidden-files: true
          path: |-
            new-webiny-project/
            !new-webiny-project/node_modules/**/*
            !new-webiny-project/**/node_modules/**/*
            !new-webiny-project/.yarn/cache/**/*
      - name: Deploy Core
        working-directory: new-webiny-project
        run: yarn webiny deploy core --env dev
      - name: Deploy API
        working-directory: new-webiny-project
        run: yarn webiny deploy api --env dev
      - name: Deploy Admin Area
        working-directory: new-webiny-project
        run: yarn webiny deploy admin --env dev
      - name: Create Cypress config
        run: yarn setup-cypress --projectFolder ../new-webiny-project
        working-directory: dev
      - name: Save Cypress config
        id: save-cypress-config
        run: >-
          echo "cypress-config=$(cat cypress-tests/cypress.config.ts | tr -d
          '\t\n\r')" >> $GITHUB_OUTPUT
        working-directory: dev
      - name: Cypress - run installation wizard test
        run: >-
          yarn cy:run --browser chrome --spec
          "cypress/e2e/adminInstallation/**/*.cy.js"
        working-directory: dev
    runs-on: ubuntu-latest
    permissions:
      id-token: write
  e2eTests-ddbEs-constants:
    name: E2E (DDB+ES) - Constants
    needs:
      - build
    outputs:
      cypress-folders: ${{ steps.list-cypress-folders.outputs.cypress-folders }}
      pulumi-backend-url: ${{ steps.pulumi-backend-url.outputs.pulumi-backend-url }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
      - name: List Cypress tests folders
        id: list-cypress-folders
        run: >-
          echo "cypress-folders=$(node scripts/listCypressTestsFolders.js)" >>
          $GITHUB_OUTPUT
      - name: Get Pulumi backend URL
        id: get-pulumi-backend-url
        run: >-
          echo "pulumi-backend-url=${{ secrets.WEBINY_PULUMI_BACKEND }}${{
          github.run_id }}_ddbEs" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  e2eTests-ddbEs-setup:
    needs:
      - constants
      - build
      - e2eTests-ddbEs-constants
    name: E2E (DDB+ES) - Project setup
    outputs:
      cypress-config: ${{ steps.save-cypress-config.outputs.cypress-config }}
    environment: next
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: 'false'
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      WEBINY_PULUMI_BACKEND: ${{ needs.e2eTests-ddbEs-constants.outputs.pulumi-backend-url }}
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_ELASTIC_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.ELASTIC_SEARCH_ENDPOINT }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ github.run_id }}_
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726952677045:role/GitHubActionsWebinyJs
          aws-region: eu-central-1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: dev
      - uses: actions/cache@v4
        with:
          path: dev/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: dev/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: dev
      - name: Build packages
        run: yarn build
        working-directory: dev
      - name: Start Verdaccio local server
        working-directory: dev
        run: >-
          yarn add pm2 verdaccio && npx pm2 start verdaccio -- -c
          .verdaccio.yaml
      - name: Configure NPM to use local registry
        run: npm config set registry http://localhost:4873
      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"
      - name: Set git username
        run: git config --global user.name "webiny-bot"
      - name: Create ".npmrc" file in the project root, with a dummy auth token
        run: echo '//localhost:4873/:_authToken="dummy-auth-token"' > .npmrc
        working-directory: dev
      - name: Version and publish to Verdaccio
        run: yarn release --type=verdaccio
        working-directory: dev
      - name: Create verdaccio-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: verdaccio-files-ddbEs
          retention-days: 1
          include-hidden-files: true
          path: |-
            dev/.verdaccio/
            dev/.verdaccio.yaml
      - name: Disable Webiny telemetry
        run: >
          mkdir ~/.webiny && echo '{ "id": "ci", "telemetry": false }' >
          ~/.webiny/config
      - name: Create a new Webiny project
        run: >
          npx create-webiny-project@local-npm new-webiny-project --tag local-npm
          --no-interactive --assign-to-yarnrc
          '{"npmRegistryServer":"http://localhost:4873","unsafeHttpWhitelist":["localhost"]}'
          --template-options
          '{"region":"eu-central-1","storageOperations":"ddbEs"}'
      - name: Print CLI version
        working-directory: new-webiny-project
        run: yarn webiny --version
      - name: Create project-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-files-ddbEs
          retention-days: 1
          include-hidden-files: true
          path: |-
            new-webiny-project/
            !new-webiny-project/node_modules/**/*
            !new-webiny-project/**/node_modules/**/*
            !new-webiny-project/.yarn/cache/**/*
      - name: Deploy Core
        working-directory: new-webiny-project
        run: yarn webiny deploy core --env dev
      - name: Deploy API
        working-directory: new-webiny-project
        run: yarn webiny deploy api --env dev
      - name: Deploy Admin Area
        working-directory: new-webiny-project
        run: yarn webiny deploy admin --env dev
      - name: Create Cypress config
        run: yarn setup-cypress --projectFolder ../new-webiny-project
        working-directory: dev
      - name: Save Cypress config
        id: save-cypress-config
        run: >-
          echo "cypress-config=$(cat cypress-tests/cypress.config.ts | tr -d
          '\t\n\r')" >> $GITHUB_OUTPUT
        working-directory: dev
      - name: Cypress - run installation wizard test
        run: >-
          yarn cy:run --browser chrome --spec
          "cypress/e2e/adminInstallation/**/*.cy.js"
        working-directory: dev
    runs-on: ubuntu-latest
    permissions:
      id-token: write
  e2eTests-ddbOs-constants:
    name: E2E (DDB+OS) - Constants
    needs:
      - build
    outputs:
      cypress-folders: ${{ steps.list-cypress-folders.outputs.cypress-folders }}
      pulumi-backend-url: ${{ steps.pulumi-backend-url.outputs.pulumi-backend-url }}
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - uses: actions/checkout@v4
      - name: List Cypress tests folders
        id: list-cypress-folders
        run: >-
          echo "cypress-folders=$(node scripts/listCypressTestsFolders.js)" >>
          $GITHUB_OUTPUT
      - name: Get Pulumi backend URL
        id: get-pulumi-backend-url
        run: >-
          echo "pulumi-backend-url=${{ secrets.WEBINY_PULUMI_BACKEND }}${{
          github.run_id }}_ddbOs" >> $GITHUB_OUTPUT
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: false
  e2eTests-ddbOs-setup:
    needs:
      - constants
      - build
      - e2eTests-ddbOs-constants
    name: E2E (DDB+OS) - Project setup
    outputs:
      cypress-config: ${{ steps.save-cypress-config.outputs.cypress-config }}
    environment: next
    env:
      NODE_OPTIONS: '--max_old_space_size=4096'
      YARN_ENABLE_IMMUTABLE_INSTALLS: 'false'
      CYPRESS_MAILOSAUR_API_KEY: ${{ secrets.CYPRESS_MAILOSAUR_API_KEY }}
      PULUMI_CONFIG_PASSPHRASE: ${{ secrets.PULUMI_CONFIG_PASSPHRASE }}
      PULUMI_SECRETS_PROVIDER: ${{ secrets.PULUMI_SECRETS_PROVIDER }}
      WEBINY_PULUMI_BACKEND: ${{ needs.e2eTests-ddbOs-constants.outputs.pulumi-backend-url }}
      AWS_ELASTIC_SEARCH_DOMAIN_NAME: ${{ secrets.AWS_OPEN_SEARCH_DOMAIN_NAME }}
      ELASTIC_SEARCH_ENDPOINT: ${{ secrets.OPEN_SEARCH_ENDPOINT }}
      ELASTIC_SEARCH_INDEX_PREFIX: ${{ github.run_id }}_
    steps:
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::726952677045:role/GitHubActionsWebinyJs
          aws-region: eu-central-1
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: dev
      - uses: actions/cache@v4
        with:
          path: dev/.yarn/cache
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - uses: actions/cache@v4
        with:
          path: dev/.webiny/cached-packages
          key: ${{ needs.constants.outputs.run-cache-key }}
      - name: Install dependencies
        run: yarn --immutable
        working-directory: dev
      - name: Build packages
        run: yarn build
        working-directory: dev
      - name: Start Verdaccio local server
        working-directory: dev
        run: >-
          yarn add pm2 verdaccio && npx pm2 start verdaccio -- -c
          .verdaccio.yaml
      - name: Configure NPM to use local registry
        run: npm config set registry http://localhost:4873
      - name: Set git email
        run: git config --global user.email "webiny-bot@webiny.com"
      - name: Set git username
        run: git config --global user.name "webiny-bot"
      - name: Create ".npmrc" file in the project root, with a dummy auth token
        run: echo '//localhost:4873/:_authToken="dummy-auth-token"' > .npmrc
        working-directory: dev
      - name: Version and publish to Verdaccio
        run: yarn release --type=verdaccio
        working-directory: dev
      - name: Create verdaccio-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: verdaccio-files-ddbOs
          retention-days: 1
          include-hidden-files: true
          path: |-
            dev/.verdaccio/
            dev/.verdaccio.yaml
      - name: Disable Webiny telemetry
        run: >
          mkdir ~/.webiny && echo '{ "id": "ci", "telemetry": false }' >
          ~/.webiny/config
      - name: Create a new Webiny project
        run: >
          npx create-webiny-project@local-npm new-webiny-project --tag local-npm
          --no-interactive --assign-to-yarnrc
          '{"npmRegistryServer":"http://localhost:4873","unsafeHttpWhitelist":["localhost"]}'
          --template-options
          '{"region":"eu-central-1","storageOperations":"ddbOs"}'
      - name: Print CLI version
        working-directory: new-webiny-project
        run: yarn webiny --version
      - name: Create project-files artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-files-ddbOs
          retention-days: 1
          include-hidden-files: true
          path: |-
            new-webiny-project/
            !new-webiny-project/node_modules/**/*
            !new-webiny-project/**/node_modules/**/*
            !new-webiny-project/.yarn/cache/**/*
      - name: Deploy Core
        working-directory: new-webiny-project
        run: yarn webiny deploy core --env dev
      - name: Deploy API
        working-directory: new-webiny-project
        run: yarn webiny deploy api --env dev
      - name: Deploy Admin Area
        working-directory: new-webiny-project
        run: yarn webiny deploy admin --env dev
      - name: Create Cypress config
        run: yarn setup-cypress --projectFolder ../new-webiny-project
        working-directory: dev
      - name: Save Cypress config
        id: save-cypress-config
        run: >-
          echo "cypress-config=$(cat cypress-tests/cypress.config.ts | tr -d
          '\t\n\r')" >> $GITHUB_OUTPUT
        working-directory: dev
      - name: Cypress - run installation wizard test
        run: >-
          yarn cy:run --browser chrome --spec
          "cypress/e2e/adminInstallation/**/*.cy.js"
        working-directory: dev
    runs-on: ubuntu-latest
    permissions:
      id-token: write
