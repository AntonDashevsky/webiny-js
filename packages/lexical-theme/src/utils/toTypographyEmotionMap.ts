import type { css as EmotionCSS } from "emotion";
import type { ThemeEmotionMap, TypographyHTMLTag } from "~/types";
import type { EditorTheme } from "~/createTheme";

type StyleItem = {
    id: string;
    tag: TypographyHTMLTag;
    name: string;
    styles?: Record<string, any>;
    className?: string;
};

/*
 *  Creates a map of style key ID's and typography style objects that include 'className' property which contains the
 *  CSS class name generated by the Emotion from typography styles object.
 */
export const toTypographyEmotionMap = (
    css: typeof EmotionCSS,
    theme: EditorTheme,
    themeStylesTransformer?: any
): ThemeEmotionMap => {
    const map: ThemeEmotionMap = {};
    const typographyStyles = theme.styles?.typography;
    if (!typographyStyles) {
        return {};
    }

    for (const key in typographyStyles) {
        const typographyTypeData = typographyStyles[key] as StyleItem[];
        if (typographyTypeData) {
            typographyTypeData.forEach(styleItem => {
                // If `className` is already defined, use the style as is.
                if (styleItem.className !== undefined) {
                    map[styleItem.id] = styleItem as StyleItem & { className: string };
                    return;
                }

                // 'lx' (abbreviation of lexical) variable will lead to generate shorter class names.
                // for example: instead of default 'css-181qz4b-453f345f'
                // the last segment will always end with 'lx' or 'css-181qz4b-lx'
                let transformedStyles = styleItem.styles;
                if (themeStylesTransformer) {
                    transformedStyles = themeStylesTransformer(styleItem.styles);
                }

                map[styleItem.id] = {
                    ...styleItem,
                    className: [css(transformedStyles)].filter(Boolean).join(" ")
                };
            });
        }
    }

    return map;
};
